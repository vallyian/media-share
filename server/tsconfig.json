{
    "ts-node": {
        "files": true
    },
    "compileOnSave": false,
    "compilerOptions": {
        "outDir": "./bin", /* Specify an output folder for all emitted files. */
        "target": "ESNext", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
        "module": "CommonJS", /* Specify what module code is generated. */
        "declaration": false, /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
        "declarationMap": false, /* Generates a source map for .d.ts files which map back to the original .ts source file */
        "emitDecoratorMetadata": true, /* Enables experimental support for emitting type metadata for decorators which works with the module reflect-metadata */
        "lib": [
            "ESNext",
            "DOM"
        ], /* Specify a set of bundled library declaration files that describe the target runtime environment. */
        "listEmittedFiles": true, /* Print the names of emitted files after a compilation */
        "experimentalDecorators": true, /* Enable experimental support for TC39 stage 2 draft decorators */
        "useDefineForClassFields": true, /* Emit ECMAScript-standard-compliant class fields. */
        "moduleDetection": "auto", /* Control what method is used to detect module-format JS files. */
        "moduleResolution": "node",
        "allowJs": false, /* if true, add "checkJs": true */
        "checkJs": false, /* Enable error reporting in type-checked JavaScript files */
        "emitDeclarationOnly": false, /* Only output d.ts files and not JavaScript files. */
        "removeComments": true, /* Disable emitting comments. */
        "pretty": true, /* Enable color and formatting in output to make compiler errors easier to read */
        "importHelpers": true, /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
        "importsNotUsedAsValues": "remove", /* Specify emit/checking behavior for imports that are only used for types. */
        "downlevelIteration": false, /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
        "sourceMap": false, /* also inlineSourceMap": false, "inlineSources": true */
        "emitBOM": false, /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
        "newLine": "lf", /* Set the newline character for emitting files. */
        "stripInternal": true, /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
        "noEmitHelpers": true, /* Disable generating custom helper functions like '__extends' in compiled output. */
        "noEmitOnError": true, /* Disable emitting files if any type checking errors are reported. */
        "allowSyntheticDefaultImports": true, /* Allow 'import x from y' when a module doesn't have a default export. */
        "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
        "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
        "strict": true, /* Enable all strict type-checking options. */
        "noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied 'any' type. */
        "strictNullChecks": true, /* When type checking, take into account 'null' and 'undefined'. */
        "strictFunctionTypes": true, /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
        "strictBindCallApply": true, /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
        "strictPropertyInitialization": true, /* Check for class properties that are declared but not set in the constructor. */
        "noImplicitThis": true, /* Enable error reporting when 'this' is given the type 'any'. */
        "useUnknownInCatchVariables": true, /* Default catch clause variables as 'unknown' instead of 'any'. */
        "alwaysStrict": true, /* Ensure 'use strict' is always emitted. */
        "noUnusedLocals": true, /* Enable error reporting when local variables aren't read. */
        "noUnusedParameters": true, /* Raise an error when a function parameter isn't read. */
        "exactOptionalPropertyTypes": true, /* Interpret optional property types as written, rather than adding 'undefined'. */
        "noImplicitReturns": true, /* Enable error reporting for codepaths that do not explicitly return in a function. */
        "noFallthroughCasesInSwitch": true, /* Enable error reporting for fallthrough cases in switch statements. */
        "noUncheckedIndexedAccess": true, /* Add 'undefined' to a type when accessed using an index. */
        "noImplicitOverride": true, /* Ensure overriding members in derived classes are marked with an override modifier. */
        "noPropertyAccessFromIndexSignature": true, /* Enforces using indexed accessors for keys declared using an indexed type. */
        "allowUnusedLabels": false, /* Disable error reporting for unused labels. */
        "allowUnreachableCode": false, /* Disable error reporting for unreachable code. */
        "skipDefaultLibCheck": true, /* Skip type checking .d.ts files that are included with TypeScript. */
        "skipLibCheck": false, /* Skip type checking all .d.ts files. */
        "resolveJsonModule": true, /* Enable importing .json files. */
        // "baseUrl": "./", /* Specify the base directory to resolve non-relative module names. */
        // "paths": {}, /* Specify a set of entries that re-map imports to additional lookup locations. */
        // "rootDirs": [], /* Allow multiple folders to be treated as one when resolving modules. */
        // "types": [], /* Specify type package names to be included without being referenced in a source file. */
        // "allowUmdGlobalAccess": true, /* Allow accessing UMD globals from modules. */
        // "moduleSuffixes": [], /* List of file name suffixes to search when resolving a module. */
        // "noResolve": true, /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
        // "maxNodeModuleJsDepth": 1, /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
        // "sourceRoot": "", /* Specify the root path for debuggers to find the reference source code. */
        // "preserveConstEnums": true, /* Disable erasing 'const enum' declarations in generated code. */
        // "preserveValueImports": true, /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
        // "isolatedModules": true, /* Ensure that each file can be safely transpiled without relying on other imports. */
        // "preserveSymlinks": true, /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    }
}
