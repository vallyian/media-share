#!/bin/sh -e

docker_username="${DOCKER_USERNAME:-vallyian}"
docker_repo="${DOCKER_REPO:-media-share}"
github_main="${GITHUB_MAIN:-false}"
new_version="${NEW_VERSION}"
github_sha="${GITHUB_SHA}"
semver="${SEMVER:-0.0.0}"
npm_audit_level="${NPM_AUDIT_LEVEL:-low}"
trivy_severity="${TRIVY_SEVERITY:-UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL}"
artifacts_dir="${PWD}/artifacts"

main() { case "${1}" in
    "semver"  ) semver  ;;
    "build"   ) build   ;;
    "test"    ) test    ;;
    "scan"    ) scan    ;;
    "results" ) results ;;
    "push"    ) push    ;;

    *) term "USAGE:   ./run   semver | build | test | results | scan | push"
esac }
term() { echo "\033[0;31m${1}\033[0m"; exit 1; }

####################################################################################################

semver() {
    [ "${new_version}" != "" ] || term "semver can only run in CI"

    if [ "${github_main}" = "true" ]; then
        echo "::set-output name=SEMVER::${new_version}"
        echo "SEMVER: ${new_version}"
    else
        echo "::set-output name=SEMVER::${new_version}-${github_sha}"
        echo "SEMVER: ${new_version}-${github_sha}"
    fi
}

build() {
    rm -rf artifacts

    docker buildx build \
        `[ ${github_sha} = "" ] || echo --pull` \
        --target export \
        --output=type=local,dest=artifacts \
        .

    docker buildx build \
        -t ${docker_username}/${docker_repo}:${semver} \
        --build-arg "NPM_AUDIT_LEVEL=${npm_audit_level}" \
        --build-arg "SEMVER=${semver}" \
        `[ ${github_sha} = "" ] || echo --pull` \
        --output=type=docker \
        .

    docker image inspect ${docker_username}/${docker_repo}:${semver} > /dev/null
}

test() {
    local container=${docker_username}-${docker_repo}-${semver}-smoke-test
    local smoke_test_dir="${artifacts_dir}/smoke-test"
    local cert_crt="${smoke_test_dir}/cert.crt"
    local cert_key="${smoke_test_dir}/cert.key"
    local media_dir="${smoke_test_dir}/test-dir"
    local curl_output="${smoke_test_dir}/curl-output.txt"
    local container_logs="${smoke_test_dir}/container-logs.txt"
    local test_failed=true

    rm -rf "${smoke_test_dir}"
    mkdir -p "${media_dir}"
    echo "test file" > "${media_dir}/test-file"

    echo "creating test self-signed certs..."
    openssl req -new -newkey rsa:4096 -days 1 -nodes -x509 \
        -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" \
        -out "${cert_crt}" -keyout "${cert_key}"
    chmod 777 "${cert_crt}" "${cert_key}"

    echo "starting service..."
    (docker stop ${container} && docker rm ${container} || echo "container ${container} not running") && \
    docker run --name ${container} --rm \
        -v "${smoke_test_dir}:/home/node/app/media" \
        -v "${cert_crt}:/run/secrets/cert.crt:ro" \
        -v "${cert_key}:/run/secrets/cert.key:ro" \
        -e "DEBUG=*" \
        -e "G_CLIENT_ID=test.apps.googleusercontent.com" \
        -e "G_EMAILS=test@gmail.com" \
        -p "58081:58082" \
        ${docker_username}/${docker_repo}:${semver} &

    echo "waiting for service to become available..."
    timeout 30s bash -c 'while [[ "$(curl --insecure https://localhost:58081/health)" != "healthy" ]]; do sleep 5; done' \
    || echo "health endpoint not available"

    curl --insecure --verbose https://localhost:58081/test-dir >> "${curl_output}" 2>&1 \
    || echo "test index media dir not available"

    curl --insecure --verbose https://localhost:58081/test-dir/test-file >> "${curl_output}" 2>&1 \
    || echo "test static media file not available"

    if   grep -Fq "GET /test-dir HTTP/1.1"           "${curl_output}" \
    &&   grep -Fq "GET /test-dir/test-file HTTP/1.1" "${curl_output}" \
    &&   grep -Fq "HTTP/1.1 401 Unauthorized"        "${curl_output}" \
    && ! grep -Fq "HTTP/1.1 200 OK"                  "${curl_output}" \
    ;then test_failed=false; fi

    docker logs ${container} > "${container_logs}" 2>&1 || echo "docker logs cmd failed"
    docker stop ${container} || echo "docker stop cmd failed"
    rm -rf "${media_dir}"

    [ "${test_failed}" = "false" ] || term "smoke test failed"
}

scan() {
    docker run \
        --rm \
        --pull always \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v ${HOME}/.trivy/cache:/root/.cache \
        -v ${PWD}:/config \
        aquasec/trivy \
            image \
                --exit-code=1 \
                --severity "${trivy_severity}" \
                ${docker_username}/${docker_repo}:${semver}
}

results() {
    local errors=""

    [ ! -f ${artifacts_dir}/npm-test.fail    ] || errors="npm test failed\n${errors}"
    # [ ! -f ${artifacts_dir}/npm-lint.fail    ] || errors="npm lint failed\n${errors}"
    [   -f ${artifacts_dir}/unit-tests/*.xml ] || errors="npm test results not found\n${errors}"

    [ "${errors}" = "" ] || term "${errors}"
}

push() {
    [ "${semver}" != "0.0.0" ] || term "push can only run in CI"

    local latest_tag
    [ "${github_main}" = "true" ] && \
    latest_tag="-t ${docker_username}/${docker_repo}:latest" || \
    latest_tag=""
    
    docker buildx build \
        ${latest_tag} \
        -t ${docker_username}/${docker_repo}:${semver} \
        --build-arg "SEMVER=${semver}" \
        --platform "linux/amd64,linux/arm64/v8" \
        --pull \
        --output=type=registry \
        .
}

main "$@"
