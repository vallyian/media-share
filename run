#!/bin/sh -e

docker_username="${DOCKER_USERNAME:-vallyian}"
docker_repo="${DOCKER_REPO:-media-share}"
github_main="${GITHUB_MAIN:-false}"
new_version="${NEW_VERSION}"
github_sha="${GITHUB_SHA}"
semver="${SEMVER:-0.0.0}"
npm_audit_level="${NPM_AUDIT_LEVEL:-low}"
trivy_severity="${TRIVY_SEVERITY:-UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL}"
artifacts_dir="${PWD}/artifacts"

term() { echo "\033[0;31m${1}\033[0m"; exit 1; }

semver() {
    [ "${new_version}" != "" ] || term "semver can only run in CI"

    if [ "${github_main}" = "true" ]; then
        echo "::set-output name=SEMVER::${new_version}"
        echo "SEMVER: ${new_version}"
    else
        echo "::set-output name=SEMVER::${new_version}-${github_sha}"
        echo "SEMVER: ${new_version}-${github_sha}"
    fi
}

build() {
    rm -rf artifacts

    docker buildx build \
        $([ "${github_sha}" = "" ] || echo --pull) \
        --target export \
        --output=type=local,dest=artifacts \
        .

    docker buildx build \
        $([ "${github_sha}" = "" ] || echo --pull) \
        -t ${docker_username}/${docker_repo}:${semver} \
        --build-arg "NPM_AUDIT_LEVEL=${npm_audit_level}" \
        --build-arg "SEMVER=${semver}" \
        --output=type=docker \
        .

    docker image inspect ${docker_username}/${docker_repo}:${semver} > /dev/null
}

smoke_result() {
    curl --insecure --verbose http://localhost:58081${1} > "${3}" 2>&1 || return 1
    grep -Fq "GET ${1} HTTP/1.1" "${3}" || return 2
    grep -Fq "HTTP/1.1 ${2}"     "${3}" || return 3
    return 0
}
smoke() {
    local container=${docker_username}-${docker_repo}-${semver}-smoke-test
    local smoke_test_dir="${artifacts_dir}/smoke-test"
    local media_dir="${smoke_test_dir}/media"
    local media_test_dir="${media_dir}/test-dir"
    local container_logs="${smoke_test_dir}/container-logs.txt"
    local test_failed=""
    local test_id=0

    rm -rf "${smoke_test_dir}"
    mkdir -p "${media_test_dir}"
    echo "test file" > "${media_test_dir}/test-file"
    chmod -R 777 "${smoke_test_dir}"

    (docker stop ${container} > /dev/null 2>&1 && docker rm ${container} > /dev/null 2>&1) || echo "container ${container} not running"
    docker run --name ${container} --rm \
        -p "58081:58082" \
        -v "${media_dir}:/home/node/app/media" \
        -e "DEBUG=*" \
        ${docker_username}/${docker_repo}:${semver} &

    if timeout 30s sh -c 'while [ "$(curl --insecure http://localhost:58081/health)" != "healthy" ]; do sleep 5; done'; then
        test_id=$((test_id + 1))
        smoke_result "/test-dir" "200 OK" "${smoke_test_dir}/curl-${test_id}.txt" || test_failed+="${test_id},"
        local test_result_code=$? && [ "${test_result_code}" = "0" ] || test_failed+="${test_id},"

        test_id=$((test_id + 1))
        smoke_result "/test-dir/test-file" "200 OK" "${smoke_test_dir}/curl-${test_id}.txt" || test_failed+="${test_id},"
        local test_result_code=$? && [ "${test_result_code}" = "0" ] || test_failed+="${test_id},"
    fi

    (docker stop ${container} > /dev/null 2>&1 && docker rm ${container} > /dev/null 2>&1) || echo "container ${container} not running"
    docker run --name ${container} --rm \
        -p "58081:58082" \
        -v "${media_dir}:/home/node/app/media" \
        -e "MEDIA_SHARE__AuthClient=test.apps.googleusercontent.com" \
        -e "MEDIA_SHARE__AuthEmails=test@gmail.com" \
        -e "DEBUG=*" \
        ${docker_username}/${docker_repo}:${semver} &

    if timeout 30s sh -c 'while [ "$(curl --insecure http://localhost:58081/health)" != "healthy" ]; do sleep 5; done'; then
        test_id=$((test_id + 1))
        smoke_result "/test-dir" "401 Unauthorized" "${smoke_test_dir}/curl-${test_id}.txt" || test_failed+="${test_id},"
        local test_result_code=$? && [ "${test_result_code}" = "0" ] || test_failed+="${test_id},"

        test_id=$((test_id + 1))
        smoke_result "/test-dir/test-file" "401 Unauthorized" "${smoke_test_dir}/curl-${test_id}.txt" || test_failed+="${test_id},"
        local test_result_code=$? && [ "${test_result_code}" = "0" ] || test_failed+="${test_id},"
    fi

    docker logs ${container} > "${container_logs}" 2>&1 || echo "docker logs cmd failed"
    docker stop ${container} || echo "docker stop cmd failed"

    [ "${test_failed}" = "" ] || term "smoke test (${test_failed}) failed"
}

scan() {
    docker run \
        --rm \
        --pull always \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v ${HOME}/.trivy/cache:/root/.cache \
        aquasec/trivy \
            image \
                --exit-code=1 \
                --severity "${trivy_severity}" \
                ${docker_username}/${docker_repo}:${semver}
}

results() {
    local errors=""

    [ ! -f ${artifacts_dir}/npm-test.fail    ] || errors+="npm test failed\n"
    [ ! -f ${artifacts_dir}/npm-lint.fail    ] || errors+="npm lint failed\n"
    [   -f ${artifacts_dir}/unit-tests/*.xml ] || errors+="npm test results not found\n"

    [ "${errors}" = "" ] || term "${errors}"
}

push() {
    [ "${semver}" != "0.0.0" ] || term "push can only run in CI"

    local latest_tag
    [ "${github_main}" = "true" ] && \
    latest_tag="-t ${docker_username}/${docker_repo}:latest" || \
    latest_tag=""

    docker buildx build \
        ${latest_tag} \
        -t ${docker_username}/${docker_repo}:${semver} \
        --build-arg "SEMVER=${semver}" \
        --platform "linux/amd64,linux/arm64/v8" \
        --pull \
        --output=type=registry \
        .
}

ci() {
    ./run build
    ./run smoke
    ./run scan
    ./run results
}

case "${1}" in
    "semver"  ) semver  ;;
    "build"   ) build   ;;
    "smoke"   ) smoke   ;;
    "scan"    ) scan    ;;
    "results" ) results ;;
    "push"    ) push    ;;
    "ci"      ) ci      ;;

    *) term "USAGE:   ./run   semver | build | smoke | results | scan | push | ci"
esac
